/**
给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。
例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.
与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).
**/
class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        //-4 -1 1 2
        int minlost = Integer.MAX_VALUE;
        int iNums = Integer.MAX_VALUE;
        int cout = 0;
        for(int i = 0;i<nums.length;i++){
            if(iNums==nums[i]){
                continue;
            }
            int j = i+1;
            int k = nums.length-1;
            while(j<k){
                int lost = nums[i]+nums[j]+nums[k] - target;
                if(Math.abs(lost)<minlost){
                    iNums = nums[i];
                    cout = nums[i]+nums[j]+nums[k];
                    minlost = Math.abs(lost);
                }
                if(lost<0){
                    j++;
                }else if(lost == 0){
                    return cout;
                }else{
                    k--;
                }
            }
        }
        return cout;
    }
}
