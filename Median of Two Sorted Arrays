//给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。
//请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。
//你可以假设 nums1 和 nums2 不会同时为空
class Solution {
    // 二分法
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m = nums1.length;
        int n = nums2.length;
        
        if(m > n){
            int[] temp = nums2;
            nums2 = nums1;
            nums1 = temp;
            m = nums1.length;
            n = nums2.length;
        }
        
        int imin = 0;
        int imax = m;
        int halfLen = (m + n + 1)/2;
        while(imin<=imax){
            int i = (imin+imax)/2;
            //m < n 故 j不可能小于0 大于 n
            int j = halfLen-i;
            
            //二分法缩小范围找中位数
            //始终确保 nums1[i]>nums2[j-1] && nums1[i-1]<nums2[j]  且i和j将2个数组共划分长度相等2个子序列
            if(i < imax&&nums1[i]<nums2[j-1]){
                imin = i + 1;
            }
            else if(i > imin&&nums1[i-1]>nums2[j]){
                imax = i - 1;
            }
            else{
                //i 已经到了最终位置
                double maxLeft = 0;
                
                if(j == 0){
                    maxLeft = nums1[i-1];
                }
                else if(i == 0){
                    maxLeft = nums2[j-1];   
                }else{
                    maxLeft = Math.max(nums1[i-1],nums2[j-1]);
                }
                
                //halfLen = (m + n + 1)/2; 故多加了一个空位，所以中位数在左边
                if((m+n)%2==1){
                    return maxLeft;
                }
                
                double maxRight = 0;
                
                if(i == m){
                    maxRight = nums2[j];
                }
                else if(j == n){
                    maxRight = nums1[i];    
                }else{
                    maxRight = Math.min(nums1[i],nums2[j]);
                }
                
                return (maxRight+maxLeft)/2;
            }
        }
        
        return 0.00;
    }
}
